name: Release

on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Release type'
        required: false
        type: choice
        default: '(auto)'
        options:
          - '(auto)'
          - 'major'
          - 'minor'
          - 'patch'
          - 'prerelease'
      preview:
        description: 'Preview (No operation mode)'
        type: boolean
        default: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref_name == github.event.repository.default_branch
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Force branch to be at workflow sha
        run: git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        run: .github/scripts/verify-upstream.sh

      - name: Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.RELEASE_TOKEN }}
          no_operation_mode: ${{ inputs.preview }}
          force: ${{ inputs.force == '(auto)' && '' || inputs.force }}

      - name: Check if publication should be made
        id: publish_check
        run: echo "publish=$([[ '${{ inputs.preview }}' == 'false' && '${{ steps.release.outputs.released }}' == 'true' ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.4.1
        if: ${{ steps.publish_check.outputs.publish == 'true' }}
        with:
          github_token: ${{ secrets.RELEASE_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Distribution Artifacts
        uses: actions/upload-artifact@v4
        if: ${{ steps.publish_check.outputs.publish == 'true' }}
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

    outputs:
      publish: ${{ steps.publish_check.outputs.publish }}


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.publish == 'true' }}
    environment: pypi
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
          skip-existing: true
